---
layout: post
title: Webscrape from Team Rankings website
subtitle: John F. Adamek
cover-img: /assets/img/baseball.jpg
tags: [test]
comments: true
---

## Introduction

During my master's degree, I used SPSS for performing any statistical analysis however, early in my Ph.D program I was introduced to R and have not looked back since! R is more then just a program to run statistics ranging from basic descriptives to latent class modeling or neural networks. It's superior power also makes R the ideal langauge for running simulations with large iterations. However, before running any analyzes or simulations you need data. You can input a data file or... you can scrape data straight from a website. 

I love baseball so, of course, when I began teaching myself R I would relay on using baseball data over the common built-in R datasets used most learning resources (e.g., iris, mtcars, NYCflights). The Lahman and baseballr package in R are great tools that contain historical baseball data (Lahman) and functions with embedded APIs to extract data from statcast and fangraphs (baseballr), however you're restricted to the limits of the package. Also, scraping data from a website can better ensure that each time you run the code the data being pulled in is always up to date.    

When I first started learning R I was also taking statistic courses during my Ph.D at the University of Illinos at Urbana-Champaign. One of the first courses I took focused on probability theory and Bayesian statistics. About this same time, sports betting was becoming legal in Illinois and a popular betting type on MLB games was betting whether there would be a run scored in the first inning. During this time, the market was VERY favorable giving near even money (-110) for yes/no. Funny enough, I read somewhere that this lasted barely a year until Vegas and all sport bookies caught on and adjusted the 1st inning moneyline so the return is less. Either way, I started creating a model to predict whether a team would score a run in the first inning. The complete model includes data relating to the starting pitcher as well however, for the purpose of this article, I'll just focus on the beginning stages which uses a team's 1st inning score percentage and opponents 1st inning score percentage. This will allow me to predict the three different type of 1st inning bets: Team A wins (Team A scores and Team B does not), Team B wins (Team B scores and Team A does not), Tie (for this example we'll simply define tie as neither Team A or Team B scores). We will use the following probability formulas:

P(A) = Probability that Team A scores in the first inning
P(B) = Probability that Team B scores in the first inning
P(A \cap B') = P(A) - P(A \cap B) = Probability that Team A scores but not Team B
P(B \cap A') = P(B) - P(B \cap A) = Probability that Team B scores but not Team A
P(A' \cap B') = 1 - P(A U B) = Probability that neither team scores in the first inning



What this script does below is pulls in each teams 1st inning score percentage and their opponents 1st inning score percentage. 
````
```
``` CLEAN THIS UP!!!
```

```
# Creating object with the address
tr_url <- "https://www.teamrankings.com/mlb/team-stats/"
tr <- read_html(tr_url)
```

# Getting links
tr_links <- tr %>% 
  html_nodes("a") %>% 
  html_attr("href")
head(tr_links,10)


mlb_links <- tr_links[str_detect(tr_links,"mlb/stat")]
head(mlb_links)


mlb_links <- mlb_links[!str_detect(mlb_links, "/mlb/stats/")]

# Puts links in dataframe
df <- tibble(stat_links = mlb_links)

# Find per first inning stats
df <- df %>% 
  mutate(is_per_first = str_detect(stat_links, "1st-inning-scored-percentage")) %>% 
  filter(is_per_first == TRUE)

df1 <- df %>% 
  mutate(is_opp = str_detect(stat_links, "opponent-1st-inning-scored-percentage")) %>% 
  filter(is_opp == TRUE)

# Fixing the links
df <- df %>% 
  mutate(url = paste0('https://www.teamrankings.com', stat_links))
df1 <- df1 %>% 
  mutate(url = paste0('https://www.teamrankings.com', stat_links))
df1 %>% 
  head() %>% 
  knitr::kable()

# Downloadinbg the web page
get_page <- function(url){
  page <- read_html(url)
  Sys.sleep(sample(seq(.25,2.5,.25),1))
  page
}

page_data <- map(df$url, get_page)
page_data1 <- map(df1$url, get_page)
tr_data <- map(page_data, html_table)
tr_data1 <- map(page_data1, html_table)
# Binding all the tables together
tr_data <- pluck(tr_data, 1) %>% 
  map2_df(df$stat_links, 
          ~as_tibble(.x) %>% 
            mutate(stat = .y)) %>% 
  set_names(c(
    'rank',
    'team',
    'current_seas',
    'last_3',
    'last_1',
    'home',
    'away',
    'last_seas',
    'stat'
  ))
tr_data1 <- pluck(tr_data1, 1) %>% 
  map2_df(df1$stat_links, 
          ~as_tibble(.x) %>% 
            mutate(stat = .y)) %>% 
  set_names(c(
    'rank',
    'team',
    'current_seas',
    'last_3',
    'last_1',
    'home',
    'away',
    'last_seas',
    'stat'
  ))

# Create two datasets for team stat and Opp stat
team_data <- tr_data %>% 
  filter(stat == '/mlb/stat/1st-inning-scored-percentage') %>% 
  select(-last_3, -last_1, -stat)
opp_data <- tr_data1 %>% 
  select(-last_3, -last_1, -stat)

# Created a table associating each team name in TR with the team name from baseballr to substitute for it:
team_lkup <- c(Cleveland="Cleveland Indians", Washington="Washington Nationals", Miami="Miami Marlins", Atlanta="Atlanta Braves", `Chi Cubs` ="Chicago Cubs", `St. Louis` ="St. Louis Cardinals",
               Pittsburgh = "Pittsburgh Pirates", Cincinnati = 'Cincinnati Reds', Houston = 'Houston Astros', Milwaukee ='Milwaukee Brewers', `San Diego` = 'San Diego Padres', Arizona = 'Arizona Diamondbacks',
               Colorado = 'Colorado Rockies', `LA Dodgers` = 'Los Angeles Dodgers', `NY Mets` = 'New York Mets', Philadelphia = 'Philadelphia Phillies', `Kansas City` = 'Kansas City Royals', `Chi Sox` = 'Chicago White Sox',
               Minnesota = 'Minnesota Twins', Detroit = 'Detroit Tigers', Oakland = 'Oakland Athletics', Texas = 'Texas Rangers', `LA Angels` = 'Los Angeles Angels', Seattle = 'Seattle Mariners', 
               Baltimore = 'Baltimore Orioles', Boston = 'Boston Red Sox', `NY Yankees` = 'New York Yankees', Toronto = 'Toronto Blue Jays', `Tampa Bay` = 'Tampa Bay Rays', `SF Giants` = 'San Francisco Giants')
team_data$Team <- as.character(team_lkup[team_data$team])
opp_data$Team <- as.character(team_lkup[opp_data$team])

team_data <- team_data[, c(7,3:6)]
opp_data <- opp_data[, c(7,3:6)]

# Turning percentage column to numeric
team_data$current_seas <- as.numeric(sub("%", "", team_data$current_seas,fixed=TRUE))/100
team_data$home <- as.numeric(sub("%", "", team_data$home,fixed=TRUE))/100
team_data$away <- as.numeric(sub("%", "", team_data$away,fixed=TRUE))/100
team_data$last_seas <- as.numeric(sub("%", "", team_data$last_seas,fixed=TRUE))/100

# Leaves on taem_data and opp_data
rm(df, df1, page_data, page_data1, tr, tr_data, tr_data1, mlb_links, tr_links, get_page, tr_url, team_lkup)


